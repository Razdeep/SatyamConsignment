plugins {
    id 'application'
    id 'java'
    id "org.openjfx.javafxplugin" version "0.0.9"
    id 'com.diffplug.spotless' version '7.0.2'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.controlsfx', name: 'controlsfx', version: '11.2.2'
    implementation group: 'net.sf.jasperreports', name: 'jasperreports', version: '6.1.0'
    implementation group: 'com.jfoenix', name: 'jfoenix', version: '9.0.10'
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.34.0'
    implementation group: 'org.olap4j', name: 'olap4j', version: '1.2.0'
    implementation group: 'com.lowagie', name: 'itext', version: '2.1.7'

    implementation("org.openjfx:javafx-controls:24")
    implementation("org.openjfx:javafx-base:24")
    implementation("org.openjfx:javafx-graphics:24")

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
}

javafx {
    version = "11"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.base' ]
}

//sourceSets {
//    main {
//        java {
//            srcDirs = ['src']
//        }
//        resources {
//            srcDirs = ['src']
//        }
//    }
//}

spotless {
    java {
        target 'src/**/*.java'
        eclipse().configFile('spotless.eclipseformat.xml')
    }
}

mainClassName = 'satyamconsignment.Launcher'
application {
    mainClassName = 'satyamconsignment.Launcher'
}

run {
    jvmArgs = ['--add-exports=javafx.base/com.sun.javafx.event=ALL-UNNAMED']
    jvmArgs += ['--add-exports=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED']
    jvmArgs += ['--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED']
    jvmArgs += ['--add-exports=javafx.base/com.sun.javafx.binding=ALL-UNNAMED']
    jvmArgs += ['--add-exports=javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED']
}

//jar {
//  manifest {
//    attributes(
//      'Manifest-Version': 1.0,
//      'Main-Class': 'main.java.satyamconsignment.ui.login.Launcher',
//      "Class-Path": configurations.runtimeClasspath.collect { "lib/" + it.getName() }.join(' ')
//    )
//  }
///*
//    this part is commented because it is unnecessarily creating the fat jar though the actual dependencies are using from the lib directory.
//    In future, I'll try to create a fat jar without the lib directory.
//*/
//
////  from {
////    configurations.compile.collect { it.isDirectory() ? zipTree(it) : it }
////    configurations.runtimeClasspath.collect { it.isDirectory() ? zipTree(it) : it }
////  }
//}

//def dependency_directory = "${buildDir}/libs/lib/"
//
//tasks.register('copyRuntimeDeps', Copy) {
//    from configurations.runtimeClasspath
//    into "${dependency_directory}"
//}
//
//tasks.register('copyDeps', Copy) {
//    dependsOn tasks.copyRuntimeDeps
//    from configurations.compile
//    into "${dependency_directory}"
//}
//
//jar.finalizedBy(copyDeps)


tasks.register('fatJar', Jar) {
    manifest {
        attributes 'Main-Class': mainClassName
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    with jar
}