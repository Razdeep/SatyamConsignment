/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4.1/userguide/tutorial_java_projects.html
 */

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.25'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
*/
plugins {
  id 'application'
  id "org.openjfx.javafxplugin" version "0.0.9"
}

repositories {
    mavenCentral()
    maven{url "http://jasperreports.sourceforge.net/maven2/"}
    maven{url "http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts/"}
    maven{url "http://maven.geomajas.org/"}
}

dependencies {
    compile group: 'org.controlsfx', name: 'controlsfx', version: '8.40.9'
    implementation group: 'net.sf.jasperreports', name: 'jasperreports', version: '6.1.0'
    implementation group: 'com.jfoenix', name: 'jfoenix', version: '9.0.10'
    implementation group: 'com.ibm.icu', name: 'icu4j', version: '68.2'
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.7.2'

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
}

javafx {
    version = "11"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.base' ]
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['src']
        }
    }
}
mainClassName = 'satyamconsignment.ui.login.Launcher'
application {
    mainClassName = 'satyamconsignment.ui.login.Launcher'
}

run {
    jvmArgs = ['--add-exports=javafx.base/com.sun.javafx.event=ALL-UNNAMED']
    jvmArgs += ['--add-exports=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED']
    jvmArgs += ['--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED']
    jvmArgs += ['--add-exports=javafx.base/com.sun.javafx.binding=ALL-UNNAMED']
    jvmArgs += ['--add-exports=javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED']
}

jar {
  manifest {
    attributes(
      'Manifest-Version': 1.0,
      'Main-Class': 'satyamconsignment.ui.login.Launcher',
      "Class-Path": configurations.runtimeClasspath.collect { "lib/" + it.getName() }.join(' ')
    )
  }
  from {
    configurations.compile.collect { it.isDirectory() ? zipTree(it) : it }
    configurations.runtimeClasspath.collect { it.isDirectory() ? zipTree(it) : it }
  }
}

def dependency_directory = "${buildDir}/libs/lib/"

task copyRuntimeDeps(type: Copy) {
    from configurations.runtimeClasspath
    into "${dependency_directory}"
}

task copyDeps(type: Copy) {
    dependsOn tasks.copyRuntimeDeps
    from configurations.compile
    into "${dependency_directory}"
}

jar.finalizedBy(copyDeps)
